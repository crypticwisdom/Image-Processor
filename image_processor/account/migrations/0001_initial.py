# Generated by Django 4.1.3 on 2023-02-09 10:00

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('management', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, error_messages={'unique': 'Email already exists.'}, max_length=200, null=True, unique=True)),
                ('client_name', models.CharField(blank=True, error_messages={'unique': 'Client name already exists.'}, max_length=200, null=True)),
                ('username', models.CharField(blank=True, error_messages={'unique': 'This username already exists.'}, max_length=250, null=True, unique=True)),
                ('client_token', models.CharField(blank=True, error_messages={'unique': 'Client token already exists.'}, max_length=100, null=True, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ValidatorBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('block_name', models.CharField(blank=True, max_length=100, null=True)),
                ('block_token', models.CharField(blank=True, max_length=100, null=True)),
                ('file_threshold_size', models.DecimalField(decimal_places=2, default=0, help_text='Any file size above this threshold will be rejected. Sizes are converted to KB.', max_digits=10)),
                ('image_height_dimension_threshold', models.PositiveSmallIntegerField(default=0, help_text='image height dimension treshold will be used to validate both height.')),
                ('image_width_dimension_threshold', models.PositiveSmallIntegerField(default=0, help_text='image width dimension treshold will be used to validate both width.')),
                ('numb_of_images_per_process', models.PositiveSmallIntegerField(blank=True, default=1, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('allowed_extensions', models.ManyToManyField(help_text='List of allowed extensions', to='management.applicationextension')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('content_type', models.ManyToManyField(help_text="What ever content type that has been selected by the client will be allowed for the Image Processing of this Validator Block. E.g {'jpeg': 'image/jpeg'}, it means images with content type of jpeg will be acceptable.", to='management.applicationcontenttype')),
            ],
        ),
    ]
